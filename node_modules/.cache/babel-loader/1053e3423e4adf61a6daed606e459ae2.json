{"ast":null,"code":"var _jsxFileName = \"/home/chris/Dev/coding-challenge/src/App.js\";\nimport React from \"react\";\nimport \"./App.css\";\n\nconst data = require(\"../src/data.json\");\n\nconst names = data.reduce((accumulator, currentValue) => {\n  if (accumulator.indexOf(currentValue.name) === -1) {\n    accumulator.push(currentValue.name);\n  }\n\n  return accumulator;\n}, []);\nconst months = [{\n  January: 1\n}, {\n  Febuary: 2\n}, {\n  March: 3\n}, {\n  April: 4\n}, {\n  May: 5\n}, {\n  June: 6\n}, {\n  July: 7\n}, {\n  August: 8\n}];\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      name: \"\"\n    };\n\n    this.calculatePoints = amount => {\n      if (amount > 50 && amount < 100) {\n        let points = Math.floor(amount) - 50;\n        return points;\n      }\n\n      if (amount >= 100) {\n        let points = (Math.floor(amount) - 100) * 2 + 50;\n        return points;\n      } else {\n        return 0;\n      }\n    };\n\n    this.totalPoints = data => {\n      let total = 0;\n\n      for (let i in data) {\n        if (data[i].name === this.state.name) {\n          let points = this.calculatePoints(data[i].transaction);\n          total = total + points;\n        }\n      }\n\n      return total;\n    };\n\n    this.onChange = e => {\n      this.setState({\n        name: e.target.value\n      });\n    };\n\n    this.pointsByMonth = data => {};\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"input\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, \"Customer Name\"), React.createElement(\"input\", {\n      type: \"text\",\n      name: \"name\",\n      list: \"names\",\n      onChange: this.onChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }), React.createElement(\"datalist\", {\n      id: \"names\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, names.map(name => React.createElement(\"option\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, name)))), React.createElement(\"table\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, \"Name: \", this.state.name, \" \"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, \"Total Points: \", this.totalPoints(data)))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/chris/Dev/coding-challenge/src/App.js"],"names":["React","data","require","names","reduce","accumulator","currentValue","indexOf","name","push","months","January","Febuary","March","April","May","June","July","August","App","Component","state","calculatePoints","amount","points","Math","floor","totalPoints","total","i","transaction","onChange","e","setState","target","value","pointsByMonth","render","map"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n\nconst data = require(\"../src/data.json\");\n\nconst names = data.reduce((accumulator, currentValue) => {\n  if (accumulator.indexOf(currentValue.name) === -1) {\n    accumulator.push(currentValue.name);\n  }\n  return accumulator;\n}, []);\n\nconst months = [\n  { January: 1 },\n  { Febuary: 2 },\n  { March: 3 },\n  { April: 4 },\n  { May: 5 },\n  { June: 6 },\n  { July: 7 },\n  { August: 8 }\n];\n\nclass App extends React.Component {\n  state = {\n    name: \"\"\n  };\n\n  calculatePoints = amount => {\n    if (amount > 50 && amount < 100) {\n      let points = Math.floor(amount) - 50;\n      return points;\n    }\n    if (amount >= 100) {\n      let points = (Math.floor(amount) - 100) * 2 + 50;\n      return points;\n    } else {\n      return 0;\n    }\n  };\n\n  totalPoints = data => {\n    let total = 0;\n    for (let i in data) {\n      if (data[i].name === this.state.name) {\n        let points = this.calculatePoints(data[i].transaction);\n        total = total + points;\n      }\n    }\n    return total;\n  };\n\n  onChange = e => {\n    this.setState({ name: e.target.value });\n  };\n\n  pointsByMonth = data => {};\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"input\">\n          <label>Customer Name</label>\n          <input\n            type=\"text\"\n            name=\"name\"\n            list=\"names\"\n            onChange={this.onChange}\n          />\n          <datalist id=\"names\">\n            {names.map(name => (\n              <option>{name}</option>\n            ))}\n          </datalist>\n        </div>\n        <table>\n          <tr>\n            <th>Name: {this.state.name} </th>\n            <th>Total Points: {this.totalPoints(data)}</th>\n          </tr>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}